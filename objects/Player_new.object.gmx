<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.HP = global.MaxHP;
canmove = 1;
if canmove = 1
{
// Variables iniciales

canmove = 1;
grav = 0.5;
spd = 3;
jspd = 6;
hspd = 0;
vspd = 0;
Hit = 0;
Jump = 0;
Airjump = 1;
Disparo = 0;
fric = 1;

gamepad_set_axis_deadzone(0,0.7);
gamepad_set_button_threshold(0,0.5);
gamepad_set_vibration(0,0,0);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gamepad_set_vibration(0,0,0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Hit = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.HP &gt;=1 {alarm[1]=room_speed*1.5; global.HP-=1;
 timeline_add (); 
 timeline_index=Hit_Timeline;
 timeline_loop= false;
 timeline_position= 0;
 timeline_running= true;
 timeline_speed=1;
 }
if global.HP &lt;1 {instance_create (x,y,Explot_1)}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canmove = 1
if global.Player_Sel_1 = 1
{
{
//platform physics
var rkey = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
var lkey = keyboard_check(vk_left)  || (gamepad_axis_value(0,gp_axislh) &lt; 0);
var jkey = keyboard_check_pressed(ord('Z')) || (gamepad_button_check_pressed(0,gp_face1));

//check v. ground 
if(place_meeting(x,y+1, Block)) {
    Airjump = 1;
    vspd = 0;
    
    //jumping
    if(jkey) {
       
       if global.PowerUp1 = 0 
       {
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,Tierra)};
       };
       if global.PowerUp1 = 1
       {
       jspd = 7;
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,TierraPU)};
       };
    }
} else {
    // gravity
    if (vspd &lt; 5) {
        vspd += grav;
    }
    if (keyboard_check_released(ord("Z")) &amp;&amp; vspd &lt;-4) || (gamepad_button_check_released(0,gp_face1) &amp;&amp; vspd &lt;-4) {
        vspd = -4;
    }
    
    //Chek for AirJump
if global.PowerUp4
{
    if (Airjump &gt; 0 )
    {
        if (jkey) {
            vspd = -jspd;
            Airjump -= 1;
            repeat (3) { instance_create(x,y+2,Tierra_2ble_Jump)};
            }} 
    }
};
// moving right
if (rkey) {
    if  (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
};


// moving left
if (lkey) {
    if  (hspd &gt; -spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
};

// check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt;0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
};

// horizontal collisions
if (place_meeting(x+hspd, y, Block)) {
    while (!place_meeting(x+sign(hspd), y, Block)) {
        x += sign(hspd);
        }
        hspd = 0
};

// move horizontal
x+= hspd;

// vertical collisions
if (place_meeting(x, y+vspd, Block)) {
    while (!place_meeting(x, y+sign(vspd), Block)) {
        y+= sign(vspd);
        }
        vspd = 0
};

// move vertically
y+= vspd;

//Control the sprites
if (yprevious !=y) {
    sprite_index = Player_Saltando;
    image_speed = 0;
    image_index = y&gt;yprevious;
}   else    {
    if (xprevious !=x) {
        sprite_index = Player_Der_C;
        image_speed = 0.5;
    } else {
        sprite_index = Player_Der;
        image_speed = 0.5;
        }
};

//Control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x){
    image_xscale = -1;
};

if global.HP &lt;= 0 {
gamepad_set_vibration(0,1,1)
instance_create(x,y,Explot_1); instance_destroy()
instance_create(view_xview+80,view_yview+77,Fail_Stage);
alarm[2] = 0.5;
sound_play (Explot) };


if keyboard_check_released(ord('Z')) {if (vspd&lt;0) {vspd*=1;}}
//gamepad
if (gamepad_button_check_released(0,gp_face1))  {if (vspd&lt;0) {vspd*=1;}}

}
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canmove = 1
if global.Player_Sel_2 = 1
{
{
//platform physics
var rkey = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
var lkey = keyboard_check(vk_left)  || (gamepad_axis_value(0,gp_axislh) &lt; 0);
var jkey = keyboard_check_pressed(ord('Z')) || (gamepad_button_check_pressed(0,gp_face1));

//check v. ground 
if(place_meeting(x,y+1, Block)) {
    Airjump = 1;
    vspd = 0;
    
    //jumping
    if(jkey) {
       
       if global.PowerUp1 = 0 
       {
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,Tierra)};
       };
       if global.PowerUp1 = 1
       {
       jspd = 7;
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,TierraPU)};
       };
    }
} else {
    // gravity
    if (vspd &lt; 5) {
        vspd += grav;
    }
    if (keyboard_check_released(ord("Z")) &amp;&amp; vspd &lt;-4) || (gamepad_button_check_released(0,gp_face1) &amp;&amp; vspd &lt;-4) {
        vspd = -4;
    }
    
    //Chek for AirJump
if global.PowerUp4
{
    if (Airjump &gt; 0 )
    {
        if (jkey) {
            vspd = -jspd;
            Airjump -= 1;
            repeat (3) { instance_create(x,y+2,Tierra_2ble_Jump)};
            }} 
    }
};
// moving right
if (rkey) {
    if  (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
};


// moving left
if (lkey) {
    if  (hspd &gt; -spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
};

// check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt;0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
};

// horizontal collisions
if (place_meeting(x+hspd, y, Block)) {
    while (!place_meeting(x+sign(hspd), y, Block)) {
        x += sign(hspd);
        }
        hspd = 0
};

// move horizontal
x+= hspd;

// vertical collisions
if (place_meeting(x, y+vspd, Block)) {
    while (!place_meeting(x, y+sign(vspd), Block)) {
        y+= sign(vspd);
        }
        vspd = 0
};

// move vertically
y+= vspd;

//Control the sprites
if (yprevious !=y) {
    sprite_index = F_Gear_Saltando;
    image_speed = 0;
    image_index = y&gt;yprevious;
}   else    {
    if (xprevious !=x) {
        sprite_index = F_Gear_Der_C;
        image_speed = 0.5;
    } else {
        sprite_index = F_Gear_Der;
        image_speed = 0.2;
        }
};

//Control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x){
    image_xscale = -1;
};

if global.HP &lt;= 0 {
gamepad_set_vibration(0,1,1)
instance_create(x,y,Explot_1); instance_destroy()
instance_create(view_xview+80,view_yview+77,Fail_Stage);
alarm[2] = 0.5;
sound_play (Explot) };


if keyboard_check_released(ord('Z')) {if (vspd&lt;0) {vspd*=1;}}
//gamepad
if (gamepad_button_check_released(0,gp_face1))  {if (vspd&lt;0) {vspd*=1;}}

}
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canmove = 1
if global.Player_Sel_3 = 1
{
{
//platform physics
var rkey = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
var lkey = keyboard_check(vk_left)  || (gamepad_axis_value(0,gp_axislh) &lt; 0);
var jkey = keyboard_check_pressed(ord('Z')) || (gamepad_button_check_pressed(0,gp_face1));

//check v. ground 
if(place_meeting(x,y+1, Block)) {
    Airjump = 1;
    vspd = 0;
    
    //jumping
    if(jkey) {
       
       if global.PowerUp1 = 0 
       {
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,Tierra)};
       };
       if global.PowerUp1 = 1
       {
       jspd = 7;
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,TierraPU)};
       };
    }
} else {
    // gravity
    if (vspd &lt; 5) {
        vspd += grav;
    }
    if (keyboard_check_released(ord("Z")) &amp;&amp; vspd &lt;-4) || (gamepad_button_check_released(0,gp_face1) &amp;&amp; vspd &lt;-4) {
        vspd = -4;
    }
    
    //Chek for AirJump
if global.PowerUp4
{
    if (Airjump &gt; 0 )
    {
        if (jkey) {
            vspd = -jspd;
            Airjump -= 1;
            repeat (3) { instance_create(x,y+2,Tierra_2ble_Jump)};
            }} 
    }
};
// moving right
if (rkey) {
    if  (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
};


// moving left
if (lkey) {
    if  (hspd &gt; -spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
};

// check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt;0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
};

// horizontal collisions
if (place_meeting(x+hspd, y, Block)) {
    while (!place_meeting(x+sign(hspd), y, Block)) {
        x += sign(hspd);
        }
        hspd = 0
};

// move horizontal
x+= hspd;

// vertical collisions
if (place_meeting(x, y+vspd, Block)) {
    while (!place_meeting(x, y+sign(vspd), Block)) {
        y+= sign(vspd);
        }
        vspd = 0
};

// move vertically
y+= vspd;

//Control the sprites
if (yprevious !=y) {
    sprite_index = Traveler_Saltando;
    image_speed = 0;
    image_index = y&gt;yprevious;
}   else    {
    if (xprevious !=x) {
        sprite_index = Traveler_Der_C;
        image_speed = 0.5;
    } else {
        sprite_index = Traveler_Der;
        image_speed = 0.2;
        }
};

//Control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x){
    image_xscale = -1;
};

if global.HP &lt;= 0 {
gamepad_set_vibration(0,1,1)
instance_create(x,y,Explot_1); instance_destroy()
instance_create(view_xview+80,view_yview+77,Fail_Stage);
alarm[2] = 0.5;
sound_play (Explot) };


if keyboard_check_released(ord('Z')) {if (vspd&lt;0) {vspd*=1;}}
//gamepad
if (gamepad_button_check_released(0,gp_face1))  {if (vspd&lt;0) {vspd*=1;}}

}
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canmove = 1
if global.Player_Sel_4 = 1
{
{
//platform physics
var rkey = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
var lkey = keyboard_check(vk_left)  || (gamepad_axis_value(0,gp_axislh) &lt; 0);
var jkey = keyboard_check_pressed(ord('Z')) || (gamepad_button_check_pressed(0,gp_face1));

//check v. ground 
if(place_meeting(x,y+1, Block)) {
    Airjump = 1;
    vspd = 0;
    
    //jumping
    if(jkey) {
       
       if global.PowerUp1 = 0 
       {
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,Tierra)};
       };
       if global.PowerUp1 = 1
       {
       jspd = 7;
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,TierraPU)};
       };
    }
} else {
    // gravity
    if (vspd &lt; 5) {
        vspd += grav;
    }
    if (keyboard_check_released(ord("Z")) &amp;&amp; vspd &lt;-4) || (gamepad_button_check_released(0,gp_face1) &amp;&amp; vspd &lt;-4) {
        vspd = -4;
    }
    
    //Chek for AirJump
if global.PowerUp4
{
    if (Airjump &gt; 0 )
    {
        if (jkey) {
            vspd = -jspd;
            Airjump -= 1;
            repeat (3) { instance_create(x,y+2,Tierra_2ble_Jump)};
            }} 
    }
};
// moving right
if (rkey) {
    if  (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
};


// moving left
if (lkey) {
    if  (hspd &gt; -spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
};

// check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt;0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
};

// horizontal collisions
if (place_meeting(x+hspd, y, Block)) {
    while (!place_meeting(x+sign(hspd), y, Block)) {
        x += sign(hspd);
        }
        hspd = 0
};

// move horizontal
x+= hspd;

// vertical collisions
if (place_meeting(x, y+vspd, Block)) {
    while (!place_meeting(x, y+sign(vspd), Block)) {
        y+= sign(vspd);
        }
        vspd = 0
};

// move vertically
y+= vspd;

//Control the sprites
if (yprevious !=y) {
    sprite_index = Regen_Der_C;
    image_speed = 0;
    image_index = y&gt;yprevious;
}   else    {
    if (xprevious !=x) {
        sprite_index = Regen_Der_C;
        image_speed = 0.5;
    } else {
        sprite_index = Regen_Der;
        image_speed = 0.5;
        }
};

//Control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x){
    image_xscale = -1;
};

if global.HP &lt;= 0 {
gamepad_set_vibration(0,1,1)
instance_create(x,y,Explot_1); instance_destroy()
instance_create(view_xview+80,view_yview+77,Fail_Stage);
alarm[2] = 0.5;
sound_play (Explot) };


if keyboard_check_released(ord('Z')) {if (vspd&lt;0) {vspd*=1;}}
//gamepad
if (gamepad_button_check_released(0,gp_face1))  {if (vspd&lt;0) {vspd*=1;}}

}
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canmove = 1
if global.Player_Sel_5 = 1
{
{
//platform physics
var rkey = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
var lkey = keyboard_check(vk_left)  || (gamepad_axis_value(0,gp_axislh) &lt; 0);
var jkey = keyboard_check_pressed(ord('Z')) || (gamepad_button_check_pressed(0,gp_face1));

//check v. ground 
if(place_meeting(x,y+1, Block)) {
    Airjump = 1;
    vspd = 0;
    
    //jumping
    if(jkey) {
       
       if global.PowerUp1 = 0 
       {
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,Tierra)};
       };
       if global.PowerUp1 = 1
       {
       jspd = 7;
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,TierraPU)};
       };
    }
} else {
    // gravity
    if (vspd &lt; 5) {
        vspd += grav;
    }
    if (keyboard_check_released(ord("Z")) &amp;&amp; vspd &lt;-4) || (gamepad_button_check_released(0,gp_face1) &amp;&amp; vspd &lt;-4) {
        vspd = -4;
    }
    
    //Chek for AirJump
if global.PowerUp4
{
    if (Airjump &gt; 0 )
    {
        if (jkey) {
            vspd = -jspd;
            Airjump -= 1;
            repeat (3) { instance_create(x,y+2,Tierra_2ble_Jump)};
            }} 
    }
};
// moving right
if (rkey) {
    if  (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
};


// moving left
if (lkey) {
    if  (hspd &gt; -spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
};

// check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt;0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
};

// horizontal collisions
if (place_meeting(x+hspd, y, Block)) {
    while (!place_meeting(x+sign(hspd), y, Block)) {
        x += sign(hspd);
        }
        hspd = 0
};

// move horizontal
x+= hspd;

// vertical collisions
if (place_meeting(x, y+vspd, Block)) {
    while (!place_meeting(x, y+sign(vspd), Block)) {
        y+= sign(vspd);
        }
        vspd = 0
};

// move vertically
y+= vspd;

//Control the sprites
if (yprevious !=y) {
    sprite_index = Kenta_Saltando;
    image_speed = 0;
    image_index = y&gt;yprevious;
}   else    {
    if (xprevious !=x) {
        sprite_index = Kenta_Der_C;
        image_speed = 0.5;
    } else {
        sprite_index = Kenta_Der;
        image_speed = 0.5;
        }
};

//Control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x){
    image_xscale = -1;
};

if global.HP &lt;= 0 {
gamepad_set_vibration(0,1,1)
instance_create(x,y,Explot_1); instance_destroy()
instance_create(view_xview+80,view_yview+77,Fail_Stage);
alarm[2] = 0.5;
sound_play (Explot) };


if keyboard_check_released(ord('Z')) {if (vspd&lt;0) {vspd*=1;}}
//gamepad
if (gamepad_button_check_released(0,gp_face1))  {if (vspd&lt;0) {vspd*=1;}}

}
};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if canmove = 1
if global.Player_Sel_6 = 1
{
{
//platform physics
var rkey = keyboard_check(vk_right) || (gamepad_axis_value(0,gp_axislh) &gt; 0);
var lkey = keyboard_check(vk_left)  || (gamepad_axis_value(0,gp_axislh) &lt; 0);
var jkey = keyboard_check_pressed(ord('Z')) || (gamepad_button_check_pressed(0,gp_face1));

//check v. ground 
if(place_meeting(x,y+1, Block)) {
    Airjump = 1;
    vspd = 0;
    
    //jumping
    if(jkey) {
       
       if global.PowerUp1 = 0 
       {
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,Tierra)};
       };
       if global.PowerUp1 = 1
       {
       jspd = 7;
       vspd = -jspd;
       sound_play(Jump_Sound);
       repeat (3) { instance_create(x,y+8,TierraPU)};
       };
    }
} else {
    // gravity
    if (vspd &lt; 5) {
        vspd += grav;
    }
    if (keyboard_check_released(ord("Z")) &amp;&amp; vspd &lt;-4) || (gamepad_button_check_released(0,gp_face1) &amp;&amp; vspd &lt;-4) {
        vspd = -4;
    }
    
    //Chek for AirJump
if global.PowerUp4
{
    if (Airjump &gt; 0 )
    {
        if (jkey) {
            vspd = -jspd;
            Airjump -= 1;
            repeat (3) { instance_create(x,y+2,Tierra_2ble_Jump)};
            }} 
    }
};
// moving right
if (rkey) {
    if  (hspd &lt; spd) {
        hspd += fric;
    } else {
        hspd = spd;
    }
};


// moving left
if (lkey) {
    if  (hspd &gt; -spd) {
        hspd -= fric;
    } else {
        hspd = -spd;
    }
};

// check for not moving
if ((!rkey &amp;&amp; !lkey) || (rkey &amp;&amp; lkey)) {
    if (hspd != 0) {
        if (hspd &lt;0) {
            hspd += fric;
        } else {
            hspd -= fric;
        }
    }
};

// horizontal collisions
if (place_meeting(x+hspd, y, Block)) {
    while (!place_meeting(x+sign(hspd), y, Block)) {
        x += sign(hspd);
        }
        hspd = 0
};

// move horizontal
x+= hspd;

// vertical collisions
if (place_meeting(x, y+vspd, Block)) {
    while (!place_meeting(x, y+sign(vspd), Block)) {
        y+= sign(vspd);
        }
        vspd = 0
};

// move vertically
y+= vspd;

//Control the sprites
if (yprevious !=y) {
    sprite_index = Joe_Saltando;
    image_speed = 0;
    image_index = y&gt;yprevious;
}   else    {
    if (xprevious !=x) {
        sprite_index = Joe_Der_C;
        image_speed = 0.5;
    } else {
        sprite_index = Joe_Der;
        image_speed = 0.5;
        }
};

//Control the direction the player is facing
if (xprevious &lt; x) {
    image_xscale = 1;
} else if (xprevious &gt; x){
    image_xscale = -1;
};

if global.HP &lt;= 0 {
gamepad_set_vibration(0,1,1)
instance_create(x,y,Explot_1); instance_destroy()
instance_create(view_xview+80,view_yview+77,Fail_Stage);
alarm[2] = 0.5;
sound_play (Explot) };


if keyboard_check_released(ord('Z')) {if (vspd&lt;0) {vspd*=1;}}
//gamepad
if (gamepad_button_check_released(0,gp_face1))  {if (vspd&lt;0) {vspd*=1;}}

}
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="Block">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>global.PowerUp3</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>Disparo</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>206</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object_motion</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>Bullet_Player</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>180</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>421</id>
        <kind>3</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>206</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_create_object_motion</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>10</kind>
            <object>Bullet_Player</object>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*ini_open( 'Data_1.ini' );
ini_write_real( 'Boss', 'Boss_Porcent_1', global.BossPorcent_1 );
ini_write_real( 'Heart', 'Heart_Porcent_1', global.HeartPorcent_1 );
ini_write_real( 'Element', 'Element_Porcent_1',global.ElementPorcent_1 );
ini_write_real( 'Bird', 'Heart_Porcent_1',global.BirdPorcent_1 );
ini_write_real( 'Hisrtory', 'History_Porcent_1',global.HistoryPorcent_1 );
ini_close(); */
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>531</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_fullscreen</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>224</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_another_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>11</kind>
            <room>World_Map</room>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
